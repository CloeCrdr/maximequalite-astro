---
const { translations } = Astro.props;
const API_KEY = import.meta.env.GOOGLE_API_KEY;
const PLACE_ID = import.meta.env.PLACE_ID;

// Récupère la langue actuelle depuis Astro
const lang = Astro.url.searchParams.get("lang") || "fr";

// Fonction pour récupérer les avis Google
async function fetchGoogleReviews() {
  try {
    const response = await fetch(
      `https://maps.googleapis.com/maps/api/place/details/json?place_id=${PLACE_ID}&fields=reviews&language=${lang}&key=${API_KEY}`,
    );
    const data = await response.json();
    return data.result?.reviews || [];
  } catch (error) {
    console.error("Erreur lors de la récupération des avis Google :", error);
    return [];
  }
}

const googleReviews = await fetchGoogleReviews();
const reviews = googleReviews.slice(0, 5);

function renderStars(rating) {
  const fullStars = "★".repeat(Math.floor(rating)); // Étoiles pleines
  const halfStar = rating % 1 >= 0.5 ? "★" : ""; // Étoile demi pleine si nécessaire
  return fullStars + halfStar;
}
---

<section class="testimonials-section">
  <h2>{translations.review.title}</h2>
  <div class="container">
    <div class="testimonial-carousel">
      <button class="prev-btn" id="prevBtn">&#10094;</button>
      <div class="testimonial-wrapper">
        {
          reviews.length > 0 ? (
            reviews.map((review, index) => {
              const maxLength = 110; // Nombre de caractères avant coupure
              const isLongText = review.text.length > maxLength;
              let pseudo = review.author_name;
              const getInitial = (name: string) =>
                name ? name.charAt(0).toUpperCase() : "";

              // Fonction pour générer une couleur aléatoire
              const getRandomColor = () => {
                const letters = "0123456789ABCDEF";
                let color = "#";
                for (let i = 0; i < 6; i++) {
                  color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
              };

              const initial = getInitial(pseudo);
              const bgColor = getRandomColor();
              return (
                <div class="testimonial-card" key={index}>
                  <div class="top-avis">
                    {" "}
                    <div
                      class="avatar"
                      style={
                        review.profile_photo_url
                          ? ""
                          : `background-color: ${getRandomColor()};`
                      }
                    >
                      <div class="icon" style={`background-color: ${bgColor};`}>
                        {initial}
                      </div>
                    </div>
                    <div class="name_stars">
                      <p class="username">
                        <strong>{review.author_name}</strong>
                      </p>
                      <p class="stars">{renderStars(review.rating)}</p>
                    </div>
                  </div>
                  <div class="testimonial-content">
                    {review.text ? (
                      <p class="testimonial-text">
                        <span class="short-text">
                          {isLongText
                            ? review.text.substring(0, maxLength) + "..."
                            : review.text}
                        </span>
                        {isLongText && (
                          <>
                            <span class="full-text" style="display: none;">
                              {review.text}
                            </span>
                            <span
                              class="toggle-text"
                              onclick="toggleSeeMore(this)"
                                                          >
                              {translations.review.see_more}
                            </span>
                          </>
                        )}
                      </p>
                    ) : (
                      <p class="testimonial-text no-text">
                        <br />
                      </p>
                    )}
                  </div>
                </div>
              );
            })
          ) : (
            <p>{translations.review.no_reviews}</p>
          )
        }
      </div>
      <button class="next-btn" id="nextBtn">&#10095;</button>
    </div>
  </div>
</section>
<script type="application/json" id="i18n-strings">
  {
    "seeMore": "${translations.review.see_more}",
    "seeLess": "${translations.review.see_less}"
  }
</script>
<script client:load>
document.addEventListener("DOMContentLoaded", () => {
  let currentIndex = 0;
  const testimonials = document.querySelectorAll(".testimonial-card");
  const totalReviews = testimonials.length;

  function updateCarousel() {
    testimonials.forEach((testimonial, index) => {
      if (index === currentIndex) {
        testimonial.style.opacity = "1";
        testimonial.style.transform = "translateX(0)";
        testimonial.style.position = "relative";
      } else {
        testimonial.style.opacity = "0";
        testimonial.style.transform = "translateX(100%)";
        testimonial.style.position = "absolute";
      }
    });
  }

  document.getElementById("prevBtn").addEventListener("click", () => {
    currentIndex = currentIndex === 0 ? totalReviews - 1 : currentIndex - 1;
    updateCarousel();
  });

  document.getElementById("nextBtn").addEventListener("click", () => {
    currentIndex = currentIndex === totalReviews - 1 ? 0 : currentIndex + 1;
    updateCarousel();
  });

  function toggleSeeMore(element) {
    const shortText = element.previousElementSibling.previousElementSibling;
    const fullText = element.previousElementSibling;

    if (shortText.style.display === "none") {
      shortText.style.display = "inline";
      fullText.style.display = "none";
      element.textContent = i18nStrings.seeMore;
    } else {
      shortText.style.display = "none";
      fullText.style.display = "inline";
      element.textContent = i18nStrings.seeLess;
    }
  }

  window.toggleSeeMore = toggleSeeMore;

  updateCarousel();
});
</script>

<style>
  .testimonials-section {
    background-color: #e5e5e5;
    padding: 50px 0;
    overflow: hidden;
  }

  .container {
    width: 700px;
    margin: 0 auto;
    padding: 0 20px;
    text-align: center;
  }

  h2 {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 30px;
  }

  .testimonial-carousel {
    display: flex;
    align-items: top;
    justify-content: center;
    position: relative;
    width: 100%;
    margin: 0 auto;
  }

  .prev-btn,
  .next-btn {
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: #555;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    transition: color 0.3s ease;
  }

  .prev-btn {
    left: 0px;
  }

  .next-btn {
    right: -40px;
  }

  .testimonial-wrapper {
    position: relative;
    width: 100%;
    max-width: 600px;
  }

  .testimonial-card {
    background-color: #efefef;
    padding: 20px;
    border-radius: 10px;
    text-align: left;
    width: 100%;
    max-width: 100%;
    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
    position: absolute;
    transition:
      opacity 0.5s ease-in-out,
      transform 0.5s ease-in-out;
    opacity: 0;
    transform: translateX(100%);
  }

  .testimonial-card:first-child {
    position: relative;
    opacity: 1;
    transform: translateX(0);
  }

  .username {
    font-size : 1rem !important;
    font-weight: bold;
    margin-bottom: 0px;
  }

  .testimonial-text {
    font-size: .8rem;
    line-height: 135%;
    color: #333;
    overflow: auto;
  }

  .toggle-text {
    font-weight: bold;
    text-decoration: underline;
    cursor: pointer;
    color: #ad7c00;
    margin-left: 5px;
  }

  .toggle-text:hover {
    color: #d49e16;
  }

  .stars {
    font-size: .7rem;
    color: #d49e16;
    margin-bottom: 0;
    letter-spacing: .3rem;
  }

  .testimonial-text.no-text {
    font-style: italic;
    color: #777;
  }

  .icon {
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    color: white;
    border-radius: 50%;
    user-select: none;
  }

  .top-avis {
    display: flex;
    justify-content: left;
    align-items: center;
  }

  .name_stars {
    padding-left: 2rem;
  }

  @media (max-width: 768px) {
  .container {
    width: 80%;
    padding: 0 1rem;
  }

  .testimonial-wrapper {
    max-width: 80%;
    min-width: auto;
  }

  .testimonial-card {
    width: 100%;
    max-width: 100%;
    padding: 1rem;
    font-size: 0.9rem;
    box-sizing: border-box;
  }

  .username {
    font-size: 1rem;
  }

  .testimonial-text {
    font-size: 0.85rem;
  }

  .icon {
    width: 40px;
    height: 40px;
    font-size: 20px;
  }

  .top-avis {
    flex-direction: row;
    gap: 1rem;
  }

  .name_stars {
    padding-left: 0;
  }

  .prev-btn,
  .next-btn {
    font-size: 1.5rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .prev-btn {
    left: -5px;
  }

  .next-btn {
    right: -5px;
  }
}

@media (max-width: 480px) {
  .testimonial-text {
    font-size: 0.8rem;
  }

  .stars {
    font-size: 0.6rem;
    letter-spacing: 0.15rem;
  }

  .toggle-text {
    font-size: 0.75rem;
  }

  .prev-btn,
  .next-btn {
    font-size: 1.3rem;
  }
}

</style>
